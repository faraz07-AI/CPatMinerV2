// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel None
#pragma kernel Gravity
#pragma kernel Lerp
#pragma kernel SmoothLerp
#pragma kernel Explode
#pragma kernel Swirl

static const float pi = 3.1415926535897932f;

// Tells compute shader how to read buffer
struct Particle
{
	float3 position;
	float3 velocity;
	float4 color;
};

// Particle data shared with the shader
RWStructuredBuffer<Particle> particles;
StructuredBuffer<Particle> source;
StructuredBuffer<Particle> dest;

// [(bool) animating, (percent) progress]
//RWStructuredBuffer<float> misc;
float animProgress;
float strength;
float time;

// input float2 seed
// return pseudorandom float [0, 1)
float rand(float2 v) {
	v.xy += (float2) time;
	return frac(sin(dot(v.xy, float2(12.9898f, 78.233f))) * 43758.5453f);
}

// input float3 seed and int seed (id)
// return pseudorandom unit vector
float3 ruv(float3 v, int i) {
	float3 o;
	
	o.x = 1.0f - 2.0f * rand(1.123 * (v.xy + (float2) i * time));
	o.y = 1.0f - 2.0f * rand(1.231 * (v.yz + (float2) i * time));
	o.z = 1.0f - 2.0f * rand(1.312 * (v.zx + (float2) i * time));

	// normalize distribution
	o.x /= cos(o.x);
	o.y /= cos(o.y);
	o.z /= cos(o.z);

	return normalize(o);
}

[numthreads(256, 1, 1)]
void None(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	particles[i].position = dest[i].position;
	particles[i].velocity = (float3) 0;
	particles[i].color = dest[i].color;
}

[numthreads(256, 1, 1)]
void Gravity(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	float3 delta, force, vel;
	float dist, tdist, p;

	delta = dest[i].position - particles[i].position;
	dist = length(delta);

	// get total dist for color calc
	tdist = length(dest[i].position - source[i].position);
	p = 1 - dist / tdist;

	// initial velocity
	if (!any(particles[i].position - source[i].position))
		particles[i].velocity = dest[i].velocity;

	vel = particles[i].velocity;
	if (dist > 0.1f && animProgress < 1.0f)
	{
		// calculate force
		force = strength * 0.1f * normalize(delta) / max(dist, 2.0f);
		
		// apply force and dampen
		vel += force;
		vel *= 0.97f;

		// prevent infinite rebounding
		vel = min(length(vel), 1.5f * dist) * normalize(vel);

		particles[i].velocity = vel;
		particles[i].position += particles[i].velocity;
		particles[i].color = lerp(source[i].color, dest[i].color, p);
	}
	else
	{
		particles[i].position = dest[i].position;
		particles[i].velocity = (float3) 0;
		particles[i].color = dest[i].color;
	}
}

[numthreads(256, 1, 1)]
void Lerp(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	float a = animProgress;

	particles[i].position = lerp(source[i].position, dest[i].position, a);
	particles[i].velocity = (float3) 0;
	particles[i].color = lerp(source[i].color, dest[i].color, a);
}

[numthreads(256, 1, 1)]
void SmoothLerp(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	float a = sqrt(animProgress);
	
	particles[i].position = lerp(source[i].position, dest[i].position, a);
	particles[i].velocity = (float3) 0;
	particles[i].color = lerp(source[i].color, dest[i].color, a);
}

[numthreads(256, 1, 1)]
void Explode(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	
	if (!any(particles[i].position - source[i].position))
	{
		float3 r = ruv(particles[i].position, i + time);
		particles[i].velocity = 0.1f * r;
	}

	if (animProgress > 0.5f)
	{
		float3 delta = dest[i].position - particles[i].position;
		float dist = length(delta);
		
		if (dist > 0.1f && animProgress < 1.0f)
		{
			float3 force = normalize(delta);
			particles[i].velocity += 0.1f * strength * force;

			float curv = length(particles[i].velocity);
			particles[i].velocity = min(curv, dist) * normalize(particles[i].velocity);
		}
		else
		{
			particles[i].velocity = (float3) 0;
			particles[i].position = dest[i].position;
		}
	}
	
	particles[i].velocity *= 0.97f;
	particles[i].position += particles[i].velocity;
	particles[i].color = dest[i].color;
}

[numthreads(256, 1, 1)]
void Swirl(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	
	float sa = atan2(source[i].position.z, source[i].position.x);
	float ea = atan2(dest[i].position.z, dest[i].position.x) + 2.0f * pi;
	float a = lerp(sa, ea, animProgress);
	
	float sr = length(source[i].position.xz);
	float er = length(dest[i].position.xz);
	float r = lerp(sr, er, animProgress);

	float x = r * cos(a);
	float y = lerp(source[i].position.y, dest[i].position.y, animProgress);
	float z = r * sin(a);

	particles[i].position = float3(x, y, z);
	particles[i].color = dest[i].color;
}
