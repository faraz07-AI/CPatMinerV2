<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Runtime.Serialization"#>
<#@ assembly name="$(SolutionDir)ThirdParty\TypeLite.Net35\bin\$(ConfigurationName)\TypeLite.Net35.dll" #>
<#@ assembly name="$(SolutionDir)VirtualRadar.Interface\bin\$(ConfigurationName)\Newtonsoft.Json.dll" #>
<#@ assembly name="$(TargetDir)InterfaceFactory.dll" #>
<#@ assembly name="$(TargetDir)VirtualRadar.Interface.dll" #>
<#@ assembly name="$(TargetDir)$(TargetFileName)" #>
<#@ import namespace="TypeLite" #> 
<#@ import namespace="TypeLite.Net4" #>
<#@ output extension=".d.ts"#>
<#@include file="Manager.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# var ts = TypeScript.Definitions()
        .WithReference("Enums.ts")
        .WithTypeFormatter((type, f) => "I" + ((TypeLite.TsModels.TsClass)type).Name)
        .WithMemberFormatter(UseJsonName)
        .WithPropertyVisibilityFormatter(PropertyIsVisible)
        .For<VirtualRadar.Plugin.WebAdmin.JsonMenuEntry>()
        .For<VirtualRadar.Plugin.WebAdmin.View.AircraftOnlineLookupLog.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.AboutView>()
        .For<VirtualRadar.Plugin.WebAdmin.View.ConnectorActivityLog.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.LogView>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Main.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Queues.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Settings.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Settings.TestConnectionOutcomeModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Statistics.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.WebAdminPluginOptions.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.WebAdminPluginOptions.SaveOutcomeModel>()
        ;
#>
<# var ko = TypeScript.Definitions(new TypeLite.AlternateGenerators.TsKnockoutViewmodelModelGenerator())
        .WithTypeFormatter((type, f) => "I" + ((TypeLite.TsModels.TsClass)type).Name + "_KO")
        .WithMemberFormatter(UseJsonName)
        .WithPropertyVisibilityFormatter(PropertyIsVisible)
        .For<VirtualRadar.Plugin.WebAdmin.JsonMenuEntry>()
        .For<VirtualRadar.Plugin.WebAdmin.View.AircraftOnlineLookupLog.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.AboutView>()
        .For<VirtualRadar.Plugin.WebAdmin.View.ConnectorActivityLog.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.LogView>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Main.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Queues.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Settings.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Settings.TestConnectionOutcomeModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.Statistics.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.WebAdminPluginOptions.ViewModel>()
        .For<VirtualRadar.Plugin.WebAdmin.View.WebAdminPluginOptions.SaveOutcomeModel>()
        ;
#>
<#= ts.Generate(TsGeneratorOutput.Properties) #>
<#= ko.Generate(TsGeneratorOutput.Properties) #>
<# manager.StartNewFile("Enums.ts"); #>
<#= ts.Generate(TsGeneratorOutput.Enums) #>
<# manager.EndBlock(); #>
<# manager.Process(true); #>

<#+
string UseJsonName(TypeLite.TsModels.TsProperty identifier)
{
    var jsonPropertyAttribute = identifier.MemberInfo.GetCustomAttributes(false).OfType<Newtonsoft.Json.JsonPropertyAttribute>().FirstOrDefault();
    var result = jsonPropertyAttribute == null ? null : jsonPropertyAttribute.PropertyName;
    if(result == null) {
        var dataMemberAttribute = identifier.MemberInfo.GetCustomAttributes(false).OfType<System.Runtime.Serialization.DataMemberAttribute>().FirstOrDefault();
        if(dataMemberAttribute != null && !String.IsNullOrEmpty(dataMemberAttribute.Name)) {
            result = dataMemberAttribute.Name;
        }
    }

    return result ?? identifier.Name;
}

bool PropertyIsVisible(TypeLite.TsModels.TsProperty identifier)
{
    var jsonIgnoreAttribute = identifier.MemberInfo.GetCustomAttributes(false).OfType<Newtonsoft.Json.JsonIgnoreAttribute>().FirstOrDefault();
    return jsonIgnoreAttribute == null;
}
#>
