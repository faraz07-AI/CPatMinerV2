<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
// Copyright © 2010 onwards, Andrew Whewell
// All rights reserved.
//
// Redistribution and use of this software in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//    * Neither the name of the author nor the names of the program's contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OF THE SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// ===========================================================================================
//                           This file is generated by a T4 script
//   ANY CHANGES MADE DIRECTLY TO THIS FILE WILL BE LOST THE NEXT TIME THE FILE IS GENERATED
// ===========================================================================================

namespace VirtualRadar.Resources
{
    /// <summary>
    /// A static class that exposes all of the images in the common resources.
    /// </summary>
    /// <remarks><para>
    /// These images are read/write properties. The application never writes to the properties but
    /// a plugin that wanted to change the graphics used by the application could do so by assigning
    /// new images to the appropriate properties of the class. Care should be taken to allow enough
    /// room on images that are rotated by the website and to replace existing images with images
    /// of the same dimensions and colour depth.
    /// </para><para>
    /// Assigning null to an image resets it back to the default image.
    /// </para></remarks>
    public static class Images
    {
<#
var serviceProvider = this.Host as IServiceProvider;
var dte = serviceProvider.GetService(typeof(DTE)) as DTE;

var projects = new List<Project>();
projects.AddRange(dte
    .Solution
    .Projects
    .Cast<Project>()
);
for(var i = 0;i < projects.Count;++i) {
    projects.AddRange(
        projects[i].ProjectItems
            .Cast<ProjectItem>()
            .Select(r => r.SubProject)
            .OfType<Project>()
    );
}

var project = projects.Single(r => r.Name == "VirtualRadar.Resources");
var path = Path.GetDirectoryName(project.FullName);
path = Path.Combine(path, "Images");
var first = true;
foreach(var fileName in Directory.GetFiles(path)) {
    var extension = (Path.GetExtension(fileName) ?? "").ToLowerInvariant();
    if(extension != ".png" && extension != ".ico" && extension != ".jpg") continue;

    var imageFileName = String.Format("../TestImages/{0}", Path.GetFileName(fileName));
    var propertyName = Path.GetFileNameWithoutExtension(fileName).Replace(' ', '_').Replace('-', '_');
    var fieldName = String.Format("_{0}", propertyName);
    var resourceName = Path.GetFileName(fileName);

    if(!first) {
#>

<#
    }
#>
        private static readonly byte[] <#=fieldName#>_Stock = global::VirtualRadar.Resources.BinaryResources.Copy("Images.<#=resourceName#>");
        private static byte[] <#=fieldName#>;
        /// <summary>
        /// Gets or sets the <#=propertyName#> image bytes.
        /// </summary>
        /// <remarks>
        /// <img src="<#=imageFileName#>" alt="" title="<#=propertyName#>" />
        /// </remarks>
        public static byte[] <#=propertyName#>
        {
            get { return <#=fieldName#> ?? <#=fieldName#>_Stock; }
            set { <#=fieldName#> = value; }
        }

        /// <summary>
        /// Gets a value indicating whether the <see cref="<#=propertyName#>"/> image has been customised or not.
        /// </summary>
        public static bool <#=propertyName#>_IsCustom
        {
            get { return <#=fieldName#> != null; }
        }
<#
    first = false;
}
#>
    }
}
